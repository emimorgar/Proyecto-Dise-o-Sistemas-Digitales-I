`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 26.11.2024 18:21:00
// Design Name: 
// Module Name: tb_flags
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_flags;
    parameter WIDTH_flags = 4;
    parameter N_flags = 2;
   
    bit clk;//clock signal
    always #1 clk = !clk;
    
    
    Interfaz_to_flags #(WIDTH_flags,N_flags)Interfaz_to_flags_i();
    Vectorial_ALU #(WIDTH_flags, N_flags) DUT1 (
        .A(Interfaz_to_flags_i.A),
        .B(Interfaz_to_flags_i.B),
        .clk(Interfaz_to_flags_i.clk),
        .arst(Interfaz_to_flags_i.arst),
        .enable(Interfaz_to_flags_i.enable),
        .os(Interfaz_to_flags_i.os),
        .Z(Interfaz_to_flags_i.Z),
        .sel(Interfaz_to_flags_i.sel)
    );
    
    
    `define A_big_B
    `ifdef A_big_B
        initial begin
        repeat (10)begin
        Interfaz_to_flags_i.A_big_B();
        @(posedge clk)
        $display("Result: %b",Interfaz_to_flags_i.os); 
        end
        $finish;        
        end
    `endif
endmodule :tb_flags

interface Interfaz_to_flags#(parameter WIDTH=4, N=2)();
/////////////////////////////////////////////////////////////////
// Interface to generate a conection to the DUT, these is only //
// to teste the flags                                          //
/////////////////////////////////////////////////////////////////
    logic [(WIDTH*N)-1:0] A;
    logic [(WIDTH*N)-1:0] B;       // ALU inputs
    logic [(8*N)-1:0] os;        //Overflow flag and Borrow flag
    logic [3:0] sel;
    logic clk;
    logic arst;
    logic [N-1:0] enable;
    logic[((WIDTH)*N)-1:0] Z;
    bit[3:0] temp1,temp2;
    
    function A_big_B();
        A={N{1'b0}};
        B={N{1'b0}};
        enable={N{1'b1}};
        arst=1;
        sel=4'b0000;
        if (std::randomize(temp1) with{temp1<='hf;})begin
       // std::randomize(A) with{A<='hF;{N{A}};};
        A={N{temp1}};
        end
        if (std::randomize(temp2) with{temp2<temp1;})begin
        B={N{temp2}};
        end   
    endfunction
    
endinterface:Interfaz_to_flags
